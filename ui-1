import React, { useState, useMemo } from 'react';
import {
  Search, TrendingUp, Filter, Star, Zap, Wind, Sun, Battery, Leaf, Mountain,
  DollarSign, Users, Calendar, ArrowRight, PlusCircle, BarChart3, Globe,
  Shield, Wallet, Menu, X, ChevronDown, Activity, Coins, Layers,
  ArrowUpDown, Droplets, TrendingDown, Settings, Bell, User,
  ExternalLink, Copy, Lock, Unlock, Target, Briefcase, FileText,
  Database, GitBranch, Timer, Repeat, Network
} from 'lucide-react';

// ---- Color themes ----
const themes = [
  { id: 'light', label: 'Light', className: 'theme-light' },
  { id: 'dark', label: 'Dark', className: 'theme-dark' },
  { id: 'green', label: 'Green', className: 'theme-green' },
];

// ---- Data ----
const chains = [
  { id: 'ethereum', name: 'Ethereum', symbol: 'ETH' },
  { id: 'polygon', name: 'Polygon', symbol: 'MATIC' },
  { id: 'arbitrum', name: 'Arbitrum', symbol: 'ARB' },
  { id: 'base', name: 'Base', symbol: 'BASE' }
];

const assetTypes = [
  { id: 'all', label: 'All RWAs', icon: Globe },
  { id: 'solar', label: 'Solar', icon: Sun },
  { id: 'wind', label: 'Wind', icon: Wind },
  { id: 'uranium', label: 'Uranium', icon: Zap },
  { id: 'hydrogen', label: 'Hydrogen', icon: Battery },
  { id: 'battery', label: 'Battery Storage', icon: Battery },
  { id: 'bioenergy', label: 'Bioenergy', icon: Leaf },
  { id: 'geothermal', label: 'Geothermal', icon: Mountain },
  { id: 'carbon', label: 'Carbon Credits', icon: Leaf },
  { id: 'green_bonds', label: 'Green Bonds', icon: DollarSign },
  { id: 'ppa', label: 'PPAs', icon: FileText }
];

const tokenizedAssets = [
  {
    id: 1,
    symbol: 'TSOL-001',
    name: 'Texas Solar Farm Token',
    type: 'Solar',
    tvl: '$4.2M',
    apy: '12.5',
    price: '$1,247.50',
    change24h: '+3.2%',
    marketCap: '$15.8M',
    liquidity: '$890K',
    chain: 'ethereum',
    verified: true,
    yieldType: 'Revenue Share',
    nextReward: '5 days',
    holders: 1247
  },
  {
    id: 2,
    symbol: 'WIND-EU',
    name: 'European Offshore Wind',
    type: 'Wind',
    tvl: '$12.7M',
    apy: '15.8',
    price: '$845.20',
    change24h: '+7.1%',
    marketCap: '$28.3M',
    liquidity: '$1.2M',
    chain: 'polygon',
    verified: true,
    yieldType: 'Staking Rewards',
    nextReward: '2 days',
    holders: 892
  },
  {
    id: 3,
    symbol: 'H2-PRO',
    name: 'Green Hydrogen Production',
    type: 'Hydrogen',
    tvl: '$8.9M',
    apy: '18.2',
    price: '$2,156.80',
    change24h: '-1.4%',
    marketCap: '$22.1M',
    liquidity: '$654K',
    chain: 'arbitrum',
    verified: true,
    yieldType: 'LP Rewards',
    nextReward: '1 day',
    holders: 543
  },
  {
    id: 4,
    symbol: 'BATT-NET',
    name: 'Grid Battery Network',
    type: 'Battery Storage',
    tvl: '$6.3M',
    apy: '11.9',
    price: '$987.45',
    change24h: '+5.7%',
    marketCap: '$18.7M',
    liquidity: '$743K',
    chain: 'base',
    verified: true,
    yieldType: 'Auto-compound',
    nextReward: '12 hours',
    holders: 734
  }
];

const menuItems = [
  {
    category: 'Latest',
    items: [
      { id: 'market-overview', label: 'Market Overview', icon: Globe, active: true },
      { id: 'news', label: 'News', icon: FileText },
      { id: 'invest', label: 'Invest', icon: Target, badge: 'NEW' }
    ]
  },
  {
    category: 'Asset Classes',
    items: [
      { id: 'tokenized-assets', label: 'Tokenized Assets', icon: Coins },
      { id: 'defi-pools', label: 'DeFi Pools', icon: Droplets },
      { id: 'yield-farming', label: 'Yield Farming', icon: Leaf },
      { id: 'liquidity-mining', label: 'Liquidity Mining', icon: Activity },
      { id: 'staking', label: 'Staking', icon: Lock },
      { id: 'derivatives', label: 'Derivatives', icon: TrendingUp, badge: 'SOON' }
    ]
  },
  {
    category: 'Trading & DeFi',
    items: [
      { id: 'dex', label: 'DEX Trading', icon: ArrowUpDown },
      { id: 'order-book', label: 'Order Book', icon: BarChart3 },
      { id: 'cross-chain', label: 'Bridge', icon: GitBranch },
      { id: 'portfolio', label: 'Portfolio', icon: Briefcase }
    ]
  },
  {
    category: 'Analytics',
    items: [
      { id: 'research', label: 'Research', icon: Database },
      { id: 'impact', label: 'ESG Impact', icon: Leaf },
      { id: 'governance', label: 'Governance', icon: Users }
    ]
  }
];

// ---- Helpers ----
function normalizeType(type) {
  return type.toLowerCase().replace(/\s/g, '_');
}

// ---- Sidebar ----
const Sidebar = ({ sidebarOpen, setSidebarOpen, activeTab, setActiveTab }) => (
  <div className={`fixed left-0 top-0 h-full w-80 bg-white dark:bg-gray-900 shadow-xl z-50 transform transition-transform duration-300 ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:relative lg:translate-x-0 lg:shadow-none lg:border-r lg:border-gray-200 dark:lg:border-gray-800`}>
    <div className="p-4 border-b border-gray-200 dark:border-gray-800 flex items-center justify-between">
      <div className="flex items-center gap-3">
        <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-2 rounded-lg">
          <Network className="w-6 h-6 text-white" />
        </div>
        <div>
          <h1 className="text-xl font-bold text-gray-900 dark:text-white">RWA.defi</h1>
          <p className="text-xs text-gray-500 dark:text-gray-400">Real World Assets</p>
        </div>
      </div>
      <button
        onClick={() => setSidebarOpen(false)}
        className="lg:hidden p-1 hover:bg-gray-100 rounded dark:hover:bg-gray-800"
        aria-label="Close sidebar"
      >
        <X className="w-5 h-5" />
      </button>
    </div>
    <div className="overflow-y-auto h-full pb-20">
      {menuItems.map((section) => (
        <div key={section.category} className="p-4">
          <h3 className="text-sm font-medium text-gray-400 dark:text-gray-500 uppercase mb-3">{section.category}</h3>
          <div className="space-y-1">
            {section.items.map((item) => {
              const Icon = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => setActiveTab(item.id)}
                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all ${
                    activeTab === item.id
                      ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-300 border border-blue-200 dark:border-blue-700'
                      : 'text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-800'
                  }`}
                  aria-current={activeTab === item.id ? 'page' : undefined}
                >
                  <Icon className="w-4 h-4" />
                  <span className="flex-1">{item.label}</span>
                  {item.badge && (
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      item.badge === 'NEW' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                    }`}>
                      {item.badge}
                    </span>
                  )}
                </button>
              );
            })}
          </div>
        </div>
      ))}
      {/* List Your Assets CTA */}
      <div className="p-4 mx-4 mb-4 bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg dark:bg-gradient-to-r dark:from-orange-900 dark:to-yellow-900 dark:border-orange-700">
        <h4 className="font-semibold text-orange-900 dark:text-yellow-400 mb-2">List Your Assets</h4>
        <p className="text-sm text-orange-700 dark:text-yellow-300 mb-3">Tokenize and list your real-world assets</p>
        <button className="w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-2 px-4 rounded-lg font-medium text-sm hover:from-orange-600 hover:to-yellow-600 transition-all">
          Get Started
        </button>
      </div>
    </div>
  </div>
);

// ---- Token Card ----
const TokenCard = ({ token }) => (
  <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-200 dark:border-gray-700 p-6 hover:shadow-lg transition-all duration-300">
    <div className="flex justify-between items-start mb-4">
      <div className="flex items-center gap-3">
        <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
          {token.symbol.slice(0, 3)}
        </div>
        <div>
          <div className="flex items-center gap-2">
            <h3 className="font-bold text-gray-900 dark:text-white">{token.symbol}</h3>
            {token.verified && <Shield className="w-4 h-4 text-green-500" title="Verified Asset" />}
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400">{token.name}</p>
        </div>
      </div>
      <div className="flex items-center gap-2">
        <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium dark:bg-green-800 dark:text-green-100">
          {token.type}
        </span>
        <button className="text-gray-400 hover:text-yellow-500 dark:hover:text-yellow-300" aria-label="Favorite">
          <Star className="w-4 h-4" />
        </button>
      </div>
    </div>
    <div className="grid grid-cols-2 gap-4 mb-4">
      <div>
        <p className="text-sm text-gray-500 dark:text-gray-400">Price</p>
        <div className="flex items-center gap-2">
          <p className="font-semibold text-lg">{token.price}</p>
          <span className={`text-xs ${token.change24h.startsWith('+') ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
            {token.change24h}
          </span>
        </div>
      </div>
      <div>
        <p className="text-sm text-gray-500 dark:text-gray-400">APY</p>
        <p className="font-semibold text-lg text-green-600 dark:text-green-400">{token.apy}%</p>
      </div>
      <div>
        <p className="text-sm text-gray-500 dark:text-gray-400">TVL</p>
        <p className="font-semibold">{token.tvl}</p>
      </div>
      <div>
        <p className="text-sm text-gray-500 dark:text-gray-400">Liquidity</p>
        <p className="font-semibold">{token.liquidity}</p>
      </div>
    </div>
    <div className="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400 mb-4">
      <div className="flex items-center gap-1">
        <div className={`w-3 h-3 rounded-full ${
          token.chain === 'ethereum' ? 'bg-blue-500' :
          token.chain === 'polygon' ? 'bg-purple-500' :
          token.chain === 'arbitrum' ? 'bg-blue-400' : 'bg-indigo-500'
        }`}></div>
        <span className="capitalize">{token.chain}</span>
      </div>
      <span>{token.holders} holders</span>
    </div>
    <div className="flex items-center justify-between text-sm mb-4">
      <div>
        <p className="text-gray-500 dark:text-gray-400">Yield Type</p>
        <p className="font-medium">{token.yieldType}</p>
      </div>
      <div className="text-right">
        <p className="text-gray-500 dark:text-gray-400">Next Reward</p>
        <p className="font-medium">{token.nextReward}</p>
      </div>
    </div>
    <div className="flex gap-2">
      <button className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 flex items-center justify-center gap-2">
        <Coins className="w-4 h-4" />
        Trade
      </button>
      <button className="flex-1 bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 rounded-lg font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 flex items-center justify-center gap-2">
        <Lock className="w-4 h-4" />
        Stake
      </button>
    </div>
  </div>
);

// ---- Main Platform ----
const Web3RWAPlatform = () => {
  const [activeTab, setActiveTab] = useState('market-overview');
  const [selectedAssetType, setSelectedAssetType] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [selectedChain, setSelectedChain] = useState('ethereum');
  const [theme, setTheme] = useState('light');
  const [sortBy, setSortBy] = useState('apy');

  // ---- Theme class on body ----
  React.useEffect(() => {
    document.body.classList.remove(...themes.map(t => t.className));
    document.body.classList.add(themes.find(t => t.id === theme)?.className || 'theme-light');
  }, [theme]);

  // ---- Filtering & Sorting ----
  const filteredAssets = useMemo(() => {
    return tokenizedAssets.filter(token => {
      const matchesType =
        selectedAssetType === 'all' ||
        normalizeType(token.type) === selectedAssetType;
      const matchesChain = token.chain === selectedChain;
      const matchesSearch =
        token.symbol.toLowerCase().includes(searchQuery.toLowerCase()) ||
        token.name.toLowerCase().includes(searchQuery.toLowerCase());
      return matchesType && matchesChain && matchesSearch;
    });
  }, [selectedAssetType, selectedChain, searchQuery]);

  const sortedAssets = useMemo(() => {
    const arr = [...filteredAssets];
    if (sortBy === 'apy') arr.sort((a, b) => parseFloat(b.apy) - parseFloat(a.apy));
    // add more sort options as needed
    return arr;
  }, [filteredAssets, sortBy]);

  // ---- Main Render ----
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950 flex transition-colors duration-200">
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} activeTab={activeTab} setActiveTab={setActiveTab} />

      {/* Sidebar overlay for mobile */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      <div className="flex-1 flex flex-col">
        {/* Top Header */}
        <header className="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-800 px-4 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button 
                onClick={() => setSidebarOpen(true)}
                className="lg:hidden p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
                aria-label="Open sidebar"
              >
                <Menu className="w-5 h-5" />
              </button>
              
              <div className="flex items-center gap-3">
                <select 
                  value={selectedChain}
                  onChange={(e) => setSelectedChain(e.target.value)}
                  className="bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg px-3 py-2 text-sm font-medium"
                >
                  {chains.map((chain) => (
                    <option key={chain.id} value={chain.id}>
                      {chain.name}
                    </option>
                  ))}
                </select>
                
                <div className="hidden md:block h-6 w-px bg-gray-300 dark:bg-gray-800"></div>
                
                <div className="hidden md:flex items-center gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Network Active</span>
                  </div>
                  <div>Gas: 23 gwei</div>
                  <div>ETH: $2,847</div>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <button className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg relative" aria-label="Notifications">
                <Bell className="w-5 h-5" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></div>
              </button>
              
              <div className="flex items-center gap-3 bg-gray-100 dark:bg-gray-800 rounded-lg px-3 py-2">
                <Wallet className="w-4 h-4" />
                <span className="font-semibold">0x1234...5678</span>
                <button className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-200">
                  <Copy className="w-4 h-4" />
                </button>
              </div>

              <button className="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-4 py-2 rounded-lg font-semibold hover:from-green-600 hover:to-emerald-700 transition-all duration-200 flex items-center gap-2">
                <PlusCircle className="w-4 h-4" />
                List Asset
              </button>

              {/* Theme Selector */}
              <div>
                <select
                  value={theme}
                  onChange={e => setTheme(e.target.value)}
                  className="bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg px-2 py-2 text-sm font-medium"
                  aria-label="Theme selector"
                >
                  {themes.map(t => (
                    <option key={t.id} value={t.id}>{t.label} Mode</option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 p-4 lg:p-8 overflow-y-auto">
          {/* Market Stats */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="bg-blue-100 dark:bg-blue-950 w-10 h-10 rounded-lg flex items-center justify-center">
                  <DollarSign className="w-5 h-5 text-blue-600" />
                </div>
                <TrendingUp className="w-4 h-4 text-green-500" />
              </div>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mb-1">$847.2M</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">Total Value Locked</p>
              <p className="text-xs text-green-600 dark:text-green-400 mt-1">+12.4% (24h)</p>
            </div>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="bg-green-100 dark:bg-green-950 w-10 h-10 rounded-lg flex items-center justify-center">
                  <Activity className="w-5 h-5 text-green-600" />
                </div>
                <TrendingUp className="w-4 h-4 text-green-500" />
              </div>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mb-1">$156.8M</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">24h Volume</p>
              <p className="text-xs text-green-600 dark:text-green-400 mt-1">+8.7% (24h)</p>
            </div>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="bg-purple-100 dark:bg-purple-950 w-10 h-10 rounded-lg flex items-center justify-center">
                  <Coins className="w-5 h-5 text-purple-600" />
                </div>
                <span className="text-sm text-gray-600 dark:text-gray-400">342</span>
              </div>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mb-1">14.7%</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">Avg APY</p>
              <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">Across all pools</p>
            </div>
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="bg-orange-100 dark:bg-orange-950 w-10 h-10 rounded-lg flex items-center justify-center">
                  <Users className="w-5 h-5 text-orange-600" />
                </div>
                <TrendingUp className="w-4 h-4 text-green-500" />
              </div>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mb-1">28,456</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">Active Users</p>
              <p className="text-xs text-green-600 dark:text-green-400 mt-1">+5.2% (7d)</p>
            </div>
          </div>
          {/* Search and Filters */}
          <div className="flex flex-col lg:flex-row gap-4 mb-6">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search tokenized assets, pools, or projects..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-900"
              />
            </div>
            <div className="flex gap-2">
              <button className="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 px-4 py-3 rounded-lg flex items-center gap-2 transition-all duration-200">
                <Filter className="w-4 h-4" />
                Filters
              </button>
              <button className="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 px-4 py-3 rounded-lg flex items-center gap-2 transition-all duration-200">
                <BarChart3 className="w-4 h-4" />
                Analytics
              </button>
            </div>
          </div>
          {/* Asset Type Filters */}
          <div className="mb-8">
            <div className="flex flex-wrap gap-2">
              {assetTypes.map((type) => {
                const Icon = type.icon;
                return (
                  <button
                    key={type.id}
                    onClick={() => setSelectedAssetType(type.id)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                      selectedAssetType === type.id
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-800 border border-gray-200 dark:border-gray-700'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {type.label}
                  </button>
                );
              })}
            </div>
          </div>
          {/* Tokenized Assets Grid */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Tokenized Assets</h2>
              <div className="flex items-center gap-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">Sort by:</span>
                <select
                  className="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg px-3 py-2 text-sm"
                  value={sortBy}
                  onChange={e => setSortBy(e.target.value)}
                >
                  <option value="apy">Highest APY</option>
                  {/* Add TVL, 24h Volume, Market Cap logic as needed */}
                </select>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {sortedAssets.length ? (
                sortedAssets.map((token) => (
                  <TokenCard key={token.id} token={token} />
                ))
              ) : (
                <div className="col-span-full text-center text-gray-500 dark:text-gray-400 py-12">
                  No assets found.
                </div>
              )}
            </div>
          </div>
          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-6 text-white">
              <div className="flex items-center justify-between mb-4">
                <ArrowUpDown className="w-8 h-8" />
                <ArrowRight className="w-5 h-5" />
              </div>
              <h3 className="text-xl font-bold mb-2">DEX Trading</h3>
              <p className="text-blue-100 mb-4">Swap RWA tokens with minimal slippage</p>
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg font-semibold transition-all">
                Start Trading
              </button>
            </div>
            <div className="bg-gradient-to-r from-green-600 to-emerald-600 rounded-xl p-6 text-white">
              <div className="flex items-center justify-between mb-4">
                <Droplets className="w-8 h-8" />
                <ArrowRight className="w-5 h-5" />
              </div>
              <h3 className="text-xl font-bold mb-2">Liquidity Pools</h3>
              <p className="text-green-100 mb-4">Provide liquidity and earn fees</p>
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg font-semibold transition-all">
                Add Liquidity
              </button>
            </div>
            <div className="bg-gradient-to-r from-orange-600 to-red-600 rounded-xl p-6 text-white">
              <div className="flex items-center justify-between mb-4">
                <Lock className="w-8 h-8" />
                <ArrowRight className="w-5 h-5" />
              </div>
              <h3 className="text-xl font-bold mb-2">Yield Farming</h3>
              <p className="text-orange-100 mb-4">Stake LP tokens for maximum yields</p>
              <button className="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg font-semibold transition-all">
                Farm Yields
              </button>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default Web3RWAPlatform;
